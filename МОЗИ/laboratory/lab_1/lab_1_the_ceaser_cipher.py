import streamlit as st

EXCEPTIONS = '.,?!-" '

def isRussia(letter: str) -> bool:
    return 1040 <= ord(letter) <= 1103

def encryption(text: str, k: int) -> str:
    result = ''
    for i in range(len(text)):
        letter = text[i]
        if not isRussia(letter) or letter in EXCEPTIONS:
            result += letter
            continue
        elif letter.islower():
            result += chr(ord('–∞') + (ord(letter) + k - ord('–∞')) % 32)
        else:
            result += chr(ord('–ê') + (ord(letter) + k - ord('–ê')) % 32)
    return result

def decrypt_enumeration(text):
    result = {}
    for k in range(1, 32):
        result[k] = ''
        for i in range(len(text)):
            letter = text[i]
            if not isRussia(letter) or letter in EXCEPTIONS:
                result[k] += letter
                continue
            elif letter.islower():
                result[k] += chr(ord('—è') - (ord('—è') - ord(letter) + k) % 32)
            else:
                result[k] += chr(ord('–Ø') - (ord('–Ø') - ord(letter) + k) % 32)
    return result

def decrypt(text: str, k: int=None):
    result = ''
    if (k is None): 
        result = decrypt_enumeration(text)
    else:
        for i in range(len(text)):
            letter = text[i]
            if not isRussia(letter) or letter in EXCEPTIONS:
                result += letter
                continue
            elif letter.islower():
                result += chr(ord('—è') - (ord('—è') - ord(letter) + k) % 32)
            else:
                result += chr(ord('–Ø') - (ord('–Ø') - ord(letter) + k) % 32)
    return result

def get_shift(action: str):
    if action == "–®–∏—Ñ—Ä–æ–≤–∫–∞":
        shift = st.number_input(
            label='–®–∞–≥ –æ—Ç 1 –¥–æ 31',
            min_value=1, max_value=31, step=1,
            key="enc_shift"
        )
        return int(shift)
    else:
        use_step = st.checkbox("–í—ã–±—Ä–∞—Ç—å —à–∞–≥", value=False, key="dec_use_step")
        if use_step:
            shift = st.number_input(
                label='–®–∞–≥ –æ—Ç 1 –¥–æ 31',
                min_value=1, max_value=31, step=1,
                key="dec_shift"
            )
            return int(shift)
        else:
            return None

def main_page():
    st.set_page_config(
        page_title="–®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è",
        page_icon="üîë",
        layout="centered"
    )
    st.title("–®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è")

    if "dec_variants" not in st.session_state:
        st.session_state.dec_variants = {}
    if "last_text_for_variants" not in st.session_state:
        st.session_state.last_text_for_variants = ""

    user_text = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:").replace('—ë', '–µ').replace('–Å', '–ï')

    if user_text != st.session_state.last_text_for_variants:
        st.session_state.dec_variants = {}
        st.session_state.last_text_for_variants = user_text

    action = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", ("–®–∏—Ñ—Ä–æ–≤–∫–∞", "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞"))
    shift = get_shift(action)

    if action == "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞" and shift is not None:
        if st.button("–û—á–∏—Å—Ç–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", key="clear_variants_btn"):
            st.session_state.dec_variants = {}
            st.info("–°–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—á–∏—â–µ–Ω.")

    if st.button(action, key="do_action_btn"):
        file_name = None
        file_content = None

        if action == "–®–∏—Ñ—Ä–æ–≤–∫–∞":
            result = encryption(user_text, shift)
            file_name = "–®–∏—Ñ—Ä_–¶–µ–∑–∞—Ä—è_–®–∏—Ñ—Ä–æ–≤–∫–∞.txt"
            file_content = (
                "–†–µ–∑—É–ª—å—Ç–∞—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–¶–µ–∑–∞—Ä—å)\n"
                f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç (–û–¢):\n{user_text}\n\n"
                f"–ö–ª—é—á: {shift}\n\n"
                f"–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–®–¢):\n{result}\n"
            )
            st.success("–¢–µ–∫—Å—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω. –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é.")

        else:
            if shift is None:
                all_results = decrypt(user_text, None)
                file_name = "–®–∏—Ñ—Ä_–¶–µ–∑–∞—Ä—è_–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞_–í—Å–µ_–ö–ª—é—á–∏.txt"
                lines = [
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ (–ø–µ—Ä–µ–±–æ—Ä –∫–ª—é—á–µ–π)",
                    f"–®–ò–§–†-–¢–ï–ö–°–¢ (–®–¢):\n{user_text}\n"
                ]
                for k in range(1, 32):
                    lines.append(f"–ö–ª—é—á: {k}")
                    lines.append(f"–†–ê–°–®–ò–§–†–û–í–ê–ù–ù–´–ô –¢–ï–ö–°–¢ (–û–¢): {all_results[k]}")
                    lines.append("")
                file_content = "\n".join(lines)
                st.info("–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ–±–æ—Ä–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é.")
            else:
                st.session_state.dec_variants[shift] = decrypt(user_text, shift)

                file_name = "–®–∏—Ñ—Ä_–¶–µ–∑–∞—Ä—è_–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞.txt"
                lines = [
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ (–≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏)",
                    f"–®–ò–§–†-–¢–ï–ö–°–¢ (–®–¢):\n{user_text}\n"
                ]
                for k in sorted(st.session_state.dec_variants.keys()):
                    lines.append(f"–ö–ª—é—á: {k}")
                    lines.append(f"–†–ê–°–®–ò–§–†–û–í–ê–ù–ù–´–ô –¢–ï–ö–°–¢ (–û–¢): {st.session_state.dec_variants[k]}")
                    lines.append("")
                file_content = "\n".join(lines)
                st.success("–í–∞—Ä–∏–∞–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω. –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é.")

        if file_content and file_name:
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª",
                data=file_content,
                file_name=file_name,
                mime="text/plain",
                key="download_btn"
            )
