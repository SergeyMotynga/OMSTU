import streamlit as st

EXCEPTIONS = '.,?!-" '

def isRussia(letter: str) -> bool:
    return 1040 <= ord(letter) <= 1103

def encryption(text: str, k: int) -> str:
    result = ''
    for ch in text:
        if not isRussia(ch) or ch in EXCEPTIONS:
            result += ch
            continue
        if ch.islower():
            result += chr(ord('–∞') + (ord(ch) + k - ord('–∞')) % 32)
        else:
            result += chr(ord('–ê') + (ord(ch) + k - ord('–ê')) % 32)
    return result

def decrypt_enumeration(text: str):
    result = {}
    for k in range(1, 32):
        out = ''
        for ch in text:
            if not isRussia(ch) or ch in EXCEPTIONS:
                out += ch
                continue
            if ch.islower():
                out += chr(ord('—è') - (ord('—è') - ord(ch) + k) % 32)
            else:
                out += chr(ord('–Ø') - (ord('–Ø') - ord(ch) + k) % 32)
        result[k] = out
    return result

def decrypt(text: str, k: int=None):
    if k is None:
        return decrypt_enumeration(text)
    out = ''
    for ch in text:
        if not isRussia(ch) or ch in EXCEPTIONS:
            out += ch
            continue
        if ch.islower():
            out += chr(ord('—è') - (ord('—è') - ord(ch) + k) % 32)
        else:
            out += chr(ord('–Ø') - (ord('–Ø') - ord(ch) + k) % 32)
    return out

def parse_shift_input(label: str, key: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (shift_int_or_None, is_valid, error_message)
    –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ -> None, not valid (–µ—Å–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    """
    raw = st.text_input(label, key=key, placeholder="1‚Äì31")
    raw = raw.strip()
    if raw == "":
        return None, False, "–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á –æ—Ç 1 –¥–æ 31."
    try:
        val = int(raw)
    except ValueError:
        return None, False, "–ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º."
    if 1 <= val <= 31:
        return val, True, ""
    return None, False, "–ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 31."

def get_shift(action: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (shift_or_None, is_valid)
    - –î–ª—è –®–∏—Ñ—Ä–æ–≤–∫–∏ –∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è.
    - –î–ª—è –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —á–µ–∫–±–æ–∫—Å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å; –∏–Ω–∞—á–µ None/valid.
    """
    if action == "–®–∏—Ñ—Ä–æ–≤–∫–∞":
        shift, ok, err = parse_shift_input("–®–∞–≥ –æ—Ç 1 –¥–æ 31", "enc_shift")
        if not ok and err:
            st.warning(err)
        return shift, ok
    else:
        use_step = st.checkbox("–£–∫–∞–∑–∞—Ç—å —à–∞–≥ –≤—Ä—É—á–Ω—É—é", value=False, key="dec_use_step")
        if use_step:
            shift, ok, err = parse_shift_input("–®–∞–≥ –æ—Ç 1 –¥–æ 31", "dec_shift")
            if not ok and err:
                st.warning(err)
            return shift, ok
        else:
            return None, True

def main_page():
    st.set_page_config(page_title="–®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è", page_icon="üîë", layout="centered")
    st.title("–®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è")

    st.session_state.setdefault("dec_variants", {})
    st.session_state.setdefault("last_text_for_variants", "")
    st.session_state.setdefault("last_result_title", "")
    st.session_state.setdefault("last_result_text", "")

    user_text = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:").replace('—ë', '–µ').replace('–Å', '–ï')

    if user_text != st.session_state.last_text_for_variants:
        st.session_state.dec_variants = {}
        st.session_state.last_text_for_variants = user_text

    action = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", ("–®–∏—Ñ—Ä–æ–≤–∫–∞", "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞"))
    shift, shift_valid = get_shift(action)

    if action == "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞" and shift is not None:
        if st.button("–û—á–∏—Å—Ç–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", key="clear_variants_btn"):
            st.session_state.dec_variants = {}
            st.info("–°–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—á–∏—â–µ–Ω.")

    disable_action = (user_text.strip() == "") or (not shift_valid)
    do_action = st.button(action, key="do_action_btn", disabled=disable_action, use_container_width=True)

    if do_action:
        file_name = None
        file_content = None

        if action == "–®–∏—Ñ—Ä–æ–≤–∫–∞":
            result = encryption(user_text, shift)
            st.session_state.last_result_title = f"–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–®–¢), –∫–ª—é—á {shift}"
            st.session_state.last_result_text = result

            file_name = "–®–∏—Ñ—Ä_–¶–µ–∑–∞—Ä—è_–®–∏—Ñ—Ä–æ–≤–∫–∞.txt"
            file_content = (
                "–†–µ–∑—É–ª—å—Ç–∞—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–¶–µ–∑–∞—Ä—å)\n"
                f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç (–û–¢):\n{user_text}\n\n"
                f"–ö–ª—é—á: {shift}\n\n"
                f"–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–®–¢):\n{result}\n"
            )
            st.success("–¢–µ–∫—Å—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω. –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é.")

        else:
            if shift is None:
                all_results = decrypt(user_text, None)
                st.session_state.last_result_title = "–ü–µ—Ä–µ–±–æ—Ä –∫–ª—é—á–µ–π (–ø—Ä–µ–≤—å—é)"
                preview_key = st.selectbox("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–ª—é—á–∞:", list(range(1, 32)), key="preview_key")
                st.session_state.last_result_text = all_results.get(preview_key, "")

                file_name = "–®–∏—Ñ—Ä_–¶–µ–∑–∞—Ä—è_–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞_–í—Å–µ_–ö–ª—é—á–∏.txt"
                lines = [
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ (–ø–µ—Ä–µ–±–æ—Ä –∫–ª—é—á–µ–π)",
                    f"–®–ò–§–†-–¢–ï–ö–°–¢ (–®–¢):\n{user_text}\n"
                ]
                for k in range(1, 32):
                    lines.append(f"–ö–ª—é—á: {k}")
                    lines.append(f"–†–ê–°–®–ò–§–†–û–í–ê–ù–ù–´–ô –¢–ï–ö–°–¢ (–û–¢): {all_results[k]}")
                    lines.append("")
                file_content = "\n".join(lines)
                st.info("–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ–±–æ—Ä–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é.")
            else:
                dec = decrypt(user_text, shift)
                st.session_state.dec_variants[shift] = dec

                st.session_state.last_result_title = f"–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–û–¢), –∫–ª—é—á {shift}"
                st.session_state.last_result_text = dec

                file_name = "–®–∏—Ñ—Ä_–¶–µ–∑–∞—Ä—è_–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞.txt"
                lines = [
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ (–≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏)",
                    f"–®–ò–§–†-–¢–ï–ö–°–¢ (–®–¢):\n{user_text}\n"
                ]
                for k in sorted(st.session_state.dec_variants.keys()):
                    lines.append(f"–ö–ª—é—á: {k}")
                    lines.append(f"–†–ê–°–®–ò–§–†–û–í–ê–ù–ù–´–ô –¢–ï–ö–°–¢ (–û–¢): {st.session_state.dec_variants[k]}")
                    lines.append("")
                file_content = "\n".join(lines)
                st.success("–í–∞—Ä–∏–∞–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω. –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é.")

        if file_content and file_name:
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª",
                data=file_content,
                file_name=file_name,
                mime="text/plain",
                key="download_btn",
                use_container_width=True
            )

    if st.session_state.get("last_result_text", ""):
        st.subheader(st.session_state.get("last_result_title", "–†–µ–∑—É–ª—å—Ç–∞—Ç"))
        st.text_area(
            "–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–≤–æ–¥:",
            value=st.session_state["last_result_text"],
            height=200,
            key="last_output_area",
        )